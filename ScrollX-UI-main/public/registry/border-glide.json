{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "border-glide",
  "type": "registry:component",
  "title": "Border Glide",
  "description": "Modern UI cards with a moving border and smooth transitions.",
  "author": "Ahdeetai <https://aditya.is-cool.dev>",
  "dependencies": ["framer-motion", "clsx", "tailwind-merge"],
  "files": [
    {
      "type": "registry:component",
      "path": "components/ui/border-glide.tsx",
      "target": "components/ui/border-glide.tsx",
      "content": "\"use client\"\nimport React, { useRef, createContext, useContext, useCallback } from \"react\"\nimport {\n  motion,\n  AnimatePresence,\n  PanInfo,\n  useSpring,\n  useMotionTemplate,\n  useTransform,\n} from \"framer-motion\"\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription\n} from \"@/components/ui/card\"\nimport { cn } from \"@/lib/utils\"\n\ninterface BorderGlideContextType {\n  currentIndex: React.MutableRefObject<number>\n  direction: React.MutableRefObject<number>\n  handleDragEnd: (e: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => void\n  totalItems: number\n  triggerUpdate: () => void\n}\n\nconst BorderGlideContext = createContext<BorderGlideContextType | undefined>(undefined)\n\nconst useBorderGlideContext = () => {\n  const context = useContext(BorderGlideContext)\n  if (!context) {\n    throw new Error(\"BorderGlide components must be used within BorderGlide\")\n  }\n  return context\n}\n\nconst MovingBorder: React.FC<{\n  children: React.ReactNode\n  duration?: number\n  rx?: string\n  ry?: string\n  color?: string\n  width?: string\n  height?: string\n  opacity?: number\n}> = ({ children, duration = 3000, rx = \"1.5rem\", ry = \"1.5rem\", color = \"#3b82f6\", width = \"12rem\", height = \"0.5rem\", opacity = 0.8 }) => {\n  const pathRef = useRef<SVGRectElement>(null)\n  const animationRef = useRef<number | null>(null)\n  const startTimeRef = useRef<number>(Date.now())\n\n  const time = useSpring(0, {\n    stiffness: 100,\n    damping: 20,\n    mass: 0.5\n  })\n\n  const animate = useCallback(() => {\n    const elapsed = Date.now() - startTimeRef.current\n    const speed = 1000 / duration\n    time.set(elapsed * speed)\n    animationRef.current = requestAnimationFrame(animate)\n  }, [time, duration])\n\n  React.useLayoutEffect(() => {\n    startTimeRef.current = Date.now()\n    animate()\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current)\n      }\n    }\n  }, [animate])\n\n  const progress = useTransform(time, (val) => {\n    if (!pathRef.current) return 0\n    const length = pathRef.current.getTotalLength()\n    return (val % length)\n  })\n\n  const x = useTransform(progress, (val) => {\n    if (!pathRef.current) return 0\n    return pathRef.current.getPointAtLength(val).x\n  })\n\n  const y = useTransform(progress, (val) => {\n    if (!pathRef.current) return 0\n    return pathRef.current.getPointAtLength(val).y\n  })\n\n  const angle = useTransform(progress, (val) => {\n    if (!pathRef.current) return 0\n    const length = pathRef.current.getTotalLength()\n    const p1 = pathRef.current.getPointAtLength(val)\n    const p2 = pathRef.current.getPointAtLength((val + 1) % length)\n    return Math.atan2(p2.y - p1.y, p2.x - p1.x) * (180 / Math.PI)\n  })\n\n  const transform = useMotionTemplate`\n    translateX(${x}px) \n    translateY(${y}px) \n    translateX(-50%) \n    translateY(-50%) \n    rotate(${angle}deg)\n  `\n\n  const getBackgroundStyle = (color: string) => {\n    if (color.includes('gradient') || color.includes('linear-gradient') || color.includes('radial-gradient') || color.includes('conic-gradient')) {\n      return color\n    }\n    return `radial-gradient(${color} 40%, transparent 60%)`\n  }\n\n  return (\n    <>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        preserveAspectRatio=\"none\"\n        className=\"absolute h-full w-full pointer-events-none\"\n        style={{ willChange: \"auto\" }}\n      >\n        <rect\n          fill=\"none\"\n          width=\"100%\"\n          height=\"100%\"\n          rx={rx}\n          ry={ry}\n          ref={pathRef}\n          style={{ willChange: \"auto\" }}\n        />\n      </svg>\n      <motion.div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          transform,\n          willChange: \"transform\"\n        }}\n      >\n        <div\n          className=\"rounded-full\"\n          style={{\n            height,\n            width,\n            opacity,\n            background: getBackgroundStyle(color),\n            borderRadius: \"50%\"\n          }}\n        />\n      </motion.div>\n    </>\n  )\n}\n\ninterface BorderGlideProps {\n  children: React.ReactNode\n  className?: string\n  autoPlayInterval?: number\n  borderDuration?: number\n  borderColor?: string\n  borderWidth?: string\n  borderHeight?: string\n  borderOpacity?: number\n}\n\nconst BorderGlide: React.FC<BorderGlideProps> = ({\n  children,\n  className,\n  autoPlayInterval = 5000,\n  borderDuration = 3000,\n  borderColor = \"#3b82f6\",\n  borderWidth = \"6rem\",\n  borderHeight = \"6rem\",\n  borderOpacity = 0.8,\n}) => {\n  const currentIndexRef = useRef(0)\n  const directionRef = useRef(0)\n  const autoPlayRef = useRef<NodeJS.Timeout | null>(null)\n  const forceUpdateRef = useRef(0)\n  const [, setForceUpdate] = React.useReducer((x: number) => x + 1, 0)\n\n  const childrenArray = React.Children.toArray(children)\n  const totalItems = childrenArray.length\n\n  const swipeConfidenceThreshold = 10000\n  const swipePower = (offset: number, velocity: number) => Math.abs(offset) * velocity\n\n  const triggerUpdate = useCallback(() => {\n    forceUpdateRef.current += 1\n    setForceUpdate()\n  }, [])\n\n  const paginate = useCallback((newDirection: number) => {\n    directionRef.current = newDirection\n    if (newDirection === 1) {\n      currentIndexRef.current = currentIndexRef.current === totalItems - 1 ? 0 : currentIndexRef.current + 1\n    } else {\n      currentIndexRef.current = currentIndexRef.current === 0 ? totalItems - 1 : currentIndexRef.current - 1\n    }\n    triggerUpdate()\n  }, [totalItems, triggerUpdate])\n\n  const handleDragEnd = useCallback((e: MouseEvent | TouchEvent | PointerEvent, { offset, velocity }: PanInfo) => {\n    const swipe = swipePower(offset.x, velocity.x)\n    if (swipe < -swipeConfidenceThreshold) {\n      paginate(1)\n    } else if (swipe > swipeConfidenceThreshold) {\n      paginate(-1)\n    }\n  }, [paginate])\n\n  const setupAutoPlay = useCallback(() => {\n    if (autoPlayRef.current) {\n      clearInterval(autoPlayRef.current)\n    }\n    if (autoPlayInterval > 0 && totalItems > 1) {\n      autoPlayRef.current = setInterval(() => {\n        paginate(1)\n      }, autoPlayInterval)\n    }\n  }, [autoPlayInterval, totalItems, paginate])\n\n  React.useLayoutEffect(() => {\n    setupAutoPlay()\n    return () => {\n      if (autoPlayRef.current) {\n        clearInterval(autoPlayRef.current)\n      }\n    }\n  }, [setupAutoPlay])\n\n  const contextValue: BorderGlideContextType = {\n    currentIndex: currentIndexRef,\n    direction: directionRef,\n    handleDragEnd,\n    totalItems,\n    triggerUpdate,\n  }\n\n  const slideVariants = {\n    enter: (direction: number) => ({\n      x: direction > 0 ? \"100%\" : \"-100%\",\n      opacity: 0,\n      scale: 0.95\n    }),\n    center: {\n      zIndex: 1,\n      x: \"0%\",\n      opacity: 1,\n      scale: 1\n    },\n    exit: (direction: number) => ({\n      zIndex: 0,\n      x: direction < 0 ? \"100%\" : \"-100%\",\n      opacity: 0,\n      scale: 0.95\n    }),\n  }\n\n  const spring = {\n    type: \"spring\" as const,\n    stiffness: 300,\n    damping: 30,\n    mass: 0.8\n  }\n\n  return (\n    <BorderGlideContext.Provider value={contextValue}>\n      <div className={cn(\"relative w-full\", className)}>\n        <div className=\"relative w-full h-full overflow-hidden rounded-xl bg-transparent p-[2px]\">\n          <div className=\"absolute inset-0 pointer-events-none\">\n            <MovingBorder\n              duration={borderDuration}\n              rx=\"0.75rem\"\n              ry=\"0.75rem\"\n              color={borderColor}\n              width={borderWidth}\n              height={borderHeight}\n              opacity={borderOpacity}\n            >\n              <div />\n            </MovingBorder>\n          </div>\n          <div className=\"relative w-full h-full rounded-xl overflow-hidden bg-white dark:bg-[#09090b] backdrop-blur-sm\">\n            <AnimatePresence initial={false} custom={directionRef.current} mode=\"wait\">\n              <motion.div\n                key={currentIndexRef.current}\n                custom={directionRef.current}\n                variants={slideVariants}\n                initial=\"enter\"\n                animate=\"center\"\n                exit=\"exit\"\n                transition={spring}\n                drag=\"x\"\n                dragConstraints={{ left: 0, right: 0 }}\n                dragElastic={0.2}\n                onDragEnd={handleDragEnd}\n                className=\"absolute inset-0 cursor-grab active:cursor-grabbing will-change-transform\"\n                style={{ willChange: \"transform\" }}\n              >\n                {childrenArray[currentIndexRef.current]}\n              </motion.div>\n            </AnimatePresence>\n          </div>\n        </div>\n      </div>\n    </BorderGlideContext.Provider>\n  )\n}\n\ninterface BorderGlideCardProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst BorderGlideCard: React.FC<BorderGlideCardProps> = ({\n  children,\n  className,\n}) => {\n  return (\n    <Card className={cn(\"bg-transparent border shadow-none text-foreground w-full h-full\", className)}>\n      {children}\n    </Card>\n  )\n}\n\ninterface BorderGlideContentProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst BorderGlideContent: React.FC<BorderGlideContentProps> = ({\n  children,\n  className,\n}) => {\n  return (\n    <CardContent className={cn(\"p-0 w-full h-full\", className)}>\n      {children}\n    </CardContent>\n  )\n}\n\ninterface BorderGlideHeaderProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst BorderGlideHeader: React.FC<BorderGlideHeaderProps> = ({\n  children,\n  className,\n}) => {\n  return (\n    <CardHeader className={cn(\"flex flex-col space-y-1.5 p-6\", className)}>\n      {children}\n    </CardHeader>\n  )\n}\n\ninterface BorderGlideFooterProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst BorderGlideFooter: React.FC<BorderGlideFooterProps> = ({\n  children,\n  className,\n}) => {\n  return (\n    <CardFooter className={cn(\"flex items-center p-6 pt-0\", className)}>\n      {children}\n    </CardFooter>\n  )\n}\n\ninterface BorderGlideTitleProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst BorderGlideTitle: React.FC<BorderGlideTitleProps> = ({\n  children,\n  className,\n}) => {\n  return (\n    <CardTitle className={cn(\"font-semibold leading-none tracking-tight\", className)}>\n      {children}\n    </CardTitle>\n  )\n}\n\ninterface BorderGlideDescriptionProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst BorderGlideDescription: React.FC<BorderGlideDescriptionProps> = ({\n  children,\n  className,\n}) => {\n  return (\n    <CardDescription className={cn(\"text-sm text-muted-foreground\", className)}>\n      {children}\n    </CardDescription>\n  )\n}\n\nexport {\n  BorderGlide,\n  BorderGlideCard,\n  BorderGlideContent,\n  BorderGlideHeader,\n  BorderGlideFooter,\n  BorderGlideTitle,\n  BorderGlideDescription\n}\"\n}"
    },
    {
      "type": "registry:component",
      "path": "components/ui/card.tsx",
      "target": "components/ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};"
    },
    {
      "type": "registry:lib",
      "path": "lib/utils.ts",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}"
    }
  ]
}
