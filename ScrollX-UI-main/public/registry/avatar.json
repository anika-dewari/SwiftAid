{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:component",
  "title": "Avatar",
  "description": "Customizable Avatar component with animated borders for status indicators like \"close friends\" or \"normal story\".",
  "author": "Ahdeetai <https://aditya.is-cool.dev>",
  "dependencies": ["@radix-ui/react-avatar", "clsx", "tailwind-merge"],
  "files": [
    {
      "type": "registry:component",
      "path": "components/ui/avatar.tsx",
      "target": "components/ui/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport { cn } from \"@/lib/utils\";\n\ntype AvatarProps = React.ComponentPropsWithoutRef<\n  typeof AvatarPrimitive.Root\n> & {\n  variant?: \"close-friends\" | \"normal\" | \"none\";\n};\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  AvatarProps\n>(({ className, variant = \"none\", ...props }, ref) => {\n  const ringClass =\n    variant === \"close-friends\"\n      ? \"bg-gradient-to-tr from-green-400 to-green-600\"\n      : variant === \"normal\"\n      ? \"bg-[conic-gradient(at_top_right,_#f09433,_#e6683c,_#dc2743,_#cc2366,_#bc1888,_#f09433)]\"\n      : \"\";\n\n  return variant === \"none\" ? (\n    <AvatarPrimitive.Root\n      ref={ref}\n      className={cn(\n        \"relative flex h-12 w-12 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  ) : (\n    <div\n      className={cn(\n        \"h-14 w-14 rounded-full p-[2px]\",\n        ringClass,\n        \"flex items-center justify-center\"\n      )}\n    >\n      <div className=\"h-full w-full rounded-full bg-black flex items-center justify-center overflow-hidden\">\n        <AvatarPrimitive.Root\n          ref={ref}\n          className={cn(\n            \"h-full w-full rounded-full overflow-hidden\",\n            className\n          )}\n          {...props}\n        />\n      </div>\n    </div>\n  );\n});\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"h-full w-full object-cover not-prose\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-sm font-medium\",\n      className\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };"
    },
    {
      "type": "registry:lib",
      "path": "lib/utils.ts",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}"
    }
  ]
}
