{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flipstack",
  "type": "registry:component",
  "title": "FlipStack",
  "description": "A stylish and animated card stack UI for showcasing content in layered views.",
  "author": "Ahdeetai <https://aditya.is-cool.dev>",
  "dependencies": ["framer-motion", "clsx", "tailwind-merge"],
  "files": [
    {
      "type": "registry:component",
      "path": "components/ui/flipstack.tsx",
      "target": "components/ui/flipstack.tsx",
      "content": "\"use client\"\nimport { useState, useEffect, useRef } from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { Card, CardContent } from '@/components/ui/card'\n\ninterface FlipStackCard {\n  id: number\n  content?: React.ReactNode\n}\n\ninterface FlipStackProps {\n  cards?: FlipStackCard[]\n}\n\nexport default function FlipStack({ cards = [\n  { id: 1 },\n  { id: 2 },\n  { id: 3 },\n  { id: 4 },\n  { id: 5 }\n] }: FlipStackProps) {\n  const [isInView, setIsInView] = useState(false)\n  const [isMobile, setIsMobile] = useState(false)\n  const [activeIndex, setActiveIndex] = useState(0)\n  const containerRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const checkMobile = () => setIsMobile(window.innerWidth < 1024)\n    checkMobile()\n    window.addEventListener('resize', checkMobile)\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) setIsInView(true)\n    }, { threshold: 0.3 })\n    if (containerRef.current) observer.observe(containerRef.current)\n    return () => {\n      window.removeEventListener('resize', checkMobile)\n      if (containerRef.current) observer.unobserve(containerRef.current)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!isMobile || !isInView) return\n    const interval = setInterval(() => {\n      setActiveIndex((prev: number) => (prev + 1) % cards.length)\n    }, 4000)\n    return () => clearInterval(interval)\n  }, [isMobile, isInView, cards.length])\n\n  const getRotation = (index: number) => {\n    const rotations = [-8, 5, -3, 7, -5, 4, -6, 8, -2, 3]\n    return rotations[index % rotations.length]\n  }\n\n  const isActive = (index: number) => index === activeIndex\n\n  const getCardVariants = (index: number) => {\n    const totalCards = cards.length\n    const centerIndex = Math.floor(totalCards / 2)\n    const positionFromCenter = index - centerIndex\n    if (isMobile) {\n      return {\n        initial: { opacity: 0, scale: 0.9, z: -100, rotate: getRotation(index), y: 100 },\n        animate: {\n          opacity: isActive(index) ? 1 : 0.7,\n          scale: isActive(index) ? 1 : 0.95,\n          z: isActive(index) ? 0 : -100,\n          rotate: isActive(index) ? 0 : getRotation(index),\n          zIndex: isActive(index) ? 40 : totalCards + 2 - index,\n          y: isActive(index) ? [0, -80, 0] : 0,\n        }\n      }\n    }\n    return {\n      initial: { x: 0, y: index * 8 + 100, rotate: getRotation(index), scale: 1, zIndex: totalCards - index },\n      animate: {\n        x: positionFromCenter * 140,\n        y: Math.abs(positionFromCenter) * 30,\n        rotate: positionFromCenter * 12,\n        scale: 1,\n        zIndex: totalCards - Math.abs(positionFromCenter)\n      }\n    }\n  }\n\n  return (\n    <div className=\"h-full w-full py-2\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-center items-center\">\n          <div ref={containerRef} className=\"relative h-96 w-full max-w-md mx-auto\">\n            {isMobile ? (\n              <div className=\"relative h-full w-full\">\n                <AnimatePresence>\n                  {cards.map((card, index: number) => {\n                    const variants = getCardVariants(index)\n                    return (\n                      <motion.div\n                        key={card.id}\n                        className=\"absolute inset-0 origin-bottom\"\n                        initial=\"initial\"\n                        animate={isInView ? \"animate\" : \"initial\"}\n                        exit={{ opacity: 0, scale: 0.9, z: 100, rotate: getRotation(index) }}\n                        variants={variants}\n                        transition={{ duration: 0.4, ease: \"easeInOut\" }}\n                      >\n                        <Card className=\"w-full h-full shadow-2xl border-0 bg-white dark:bg-gray-800 overflow-hidden\">\n                          <CardContent className=\"p-0 h-full flex items-center justify-center\">\n                            {card.content}\n                          </CardContent>\n                        </Card>\n                      </motion.div>\n                    )\n                  })}\n                </AnimatePresence>\n              </div>\n            ) : (\n              <div className=\"relative h-full w-full flex items-center justify-center\" style={{ perspective: \"1000px\" }}>\n                {cards.map((card, index: number) => {\n                  const variants = getCardVariants(index)\n                  return (\n                    <motion.div\n                      key={card.id}\n                      className=\"absolute origin-bottom\"\n                      initial=\"initial\"\n                      animate={isInView ? \"animate\" : \"initial\"}\n                      variants={variants}\n                      transition={{ duration: 0.8, delay: index * 0.1, ease: \"easeOut\" }}\n                    >\n                      <Card className=\"w-80 h-96 shadow-2xl border-0 bg-white dark:bg-gray-800 overflow-hidden\">\n                        <CardContent className=\"p-0 h-full flex items-center justify-center\">\n                          {card.content}\n                        </CardContent>\n                      </Card>\n                    </motion.div>\n                  )\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"
    },
    {
      "type": "registry:component",
      "path": "components/ui/card.tsx",
      "target": "components/ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};"
    },
    {
      "type": "registry:lib",
      "path": "lib/utils.ts",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}"
    }
  ]
}
