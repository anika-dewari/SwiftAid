{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "profilecard",
  "type": "registry:component",
  "title": "Profile Card",
  "description": "A reusable profile card component displaying a user's image, name, bio, skills, and social links with interactive animations.",
  "author": "Ahdeetai <https://aditya.is-cool.dev>",
  "dependencies": ["framer-motion", "lucide-react"],
  "files": [
    {
      "type": "registry:component",
      "path": "components/ui/profilecard.tsx",
      "target": "components/ui/profilecard.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useRef } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { ArrowBigLeft, X } from \"lucide-react\";\nimport {\n  motion,\n  useMotionValue,\n  useTransform,\n  useAnimation,\n  AnimatePresence,\n  useMotionTemplate,\n} from \"framer-motion\";\n\ninterface Skill {\n  name: string;\n  icon: string | React.ComponentType<React.SVGProps<SVGSVGElement>> | React.ReactElement;\n}\n\ninterface SocialLink {\n  name: string;\n  url: string;\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>> | string | React.ReactElement;\n}\n\ninterface ProfileCardProps {\n  img: string;\n  name: string;\n  bio: string;\n  skills: Skill[];\n  socialLinks?: SocialLink[];\n  position: string;\n  spotlight?: boolean;\n  spotlightColor?: string;\n}\n\nexport default function ProfileCard({\n  img,\n  name,\n  bio,\n  skills,\n  socialLinks = [],\n  position,\n  spotlight = false,\n  spotlightColor = \"14, 165, 233\",\n}: ProfileCardProps) {\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [isImageShrunken, setIsImageShrunken] = useState(false);\n  const arrowControls = useAnimation();\n  const dragX = useMotionValue(0);\n  const dragThreshold = 50;\n  const isAnimating = useRef(false);\n\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  const spotlightX = useMotionValue(0);\n  const spotlightY = useMotionValue(0);\n  const backgroundImage = useMotionTemplate`radial-gradient(300px circle at ${spotlightX}px ${spotlightY}px, rgba(${spotlightColor}, 0.15), transparent)`;\n\n  const arrowRotation = useTransform(dragX, [0, dragThreshold], [-180, 145]);\n\n  const handleDragEnd = () => {\n    if (dragX.get() > dragThreshold && !isRevealed && !isAnimating.current) {\n      isAnimating.current = true;\n      arrowControls.start({ x: dragThreshold, transition: { duration: 0.2 } });\n      setIsImageShrunken(true);\n      setTimeout(() => {\n        setIsRevealed(true);\n        isAnimating.current = false;\n      }, 400);\n    } else if (dragX.get() <= dragThreshold && !isRevealed) {\n      arrowControls.start({\n        x: 0,\n        transition: { type: \"spring\", stiffness: 500, damping: 30 },\n      });\n    } else if (isRevealed) {\n      arrowControls.start({\n        x: dragThreshold,\n        transition: { type: \"spring\", stiffness: 500, damping: 30 },\n      });\n    }\n  };\n\n  const resetCard = () => {\n    if (isRevealed && !isAnimating.current) {\n      isAnimating.current = true;\n      x.set(0);\n      y.set(0);\n      arrowControls.start({ x: 0, transition: { duration: 0.3 } });\n      setIsRevealed(false);\n      setTimeout(() => {\n        setIsImageShrunken(false);\n        isAnimating.current = false;\n      }, 300);\n    }\n  };\n\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n  const rotateDepth = 12;\n  const translateDepth = 15;\n\n  const rotateX = useTransform(y, [-0.5, 0.5], [`-${rotateDepth}deg`, `${rotateDepth}deg`]);\n  const rotateY = useTransform(x, [-0.5, 0.5], [`${rotateDepth}deg`, `-${rotateDepth}deg`]);\n  const translateX = useTransform(x, [-0.5, 0.5], [`-${translateDepth}px`, `${translateDepth}px`]);\n  const translateY = useTransform(y, [-0.5, 0.5], [`${translateDepth}px`, `-${translateDepth}px`]);\n\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!cardRef.current || !isRevealed || isAnimating.current) return;\n    const rect = cardRef.current.getBoundingClientRect();\n    const mouseXPos = e.clientX - rect.left;\n    const mouseYPos = e.clientY - rect.top;\n    const buffer = 10;\n    if (mouseXPos < -buffer || mouseXPos > rect.width + buffer || mouseYPos < -buffer || mouseYPos > rect.height + buffer) return;\n    x.set(mouseXPos / rect.width - 0.5);\n    y.set(mouseYPos / rect.height - 0.5);\n    if (spotlight) {\n      mouseX.set(mouseXPos);\n      mouseY.set(mouseYPos);\n      spotlightX.set(mouseXPos);\n      spotlightY.set(mouseYPos);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (isRevealed && !isAnimating.current) {\n      setTimeout(() => {\n        if (isRevealed && !isAnimating.current) {\n          x.set(0);\n          y.set(0);\n        }\n      }, 50);\n    }\n  };\n\n  const renderSkillIcon = (skill: Skill) => {\n    if (typeof skill.icon === 'string') {\n      if (skill.icon.startsWith('<svg')) {\n        return <div dangerouslySetInnerHTML={{ __html: skill.icon }} className=\"w-5 h-5 flex items-center justify-center\" />;\n      } else {\n        return <Image src={skill.icon} alt={skill.name} width={20} height={20} />;\n      }\n    }\n    if (React.isValidElement(skill.icon)) {\n      return React.cloneElement(skill.icon as React.ReactElement, { className: \"w-5 h-5\" });\n    }\n    if (typeof skill.icon === 'function') {\n      const IconComponent = skill.icon;\n      return <IconComponent className=\"w-5 h-5\" />;\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"flex items-center justify-center\">\n      <motion.div ref={cardRef} className={`relative w-[17rem] h-[21.2rem] rounded-[15px] overflow-hidden shadow-lg dark:shadow-[0_4px_10px_rgba(255,255,255,0.1)] bg-neutral-50 dark:bg-black ${spotlight && isRevealed ? 'group' : ''}`} onMouseMove={handleMouseMove} onMouseLeave={handleMouseLeave} style={isRevealed ? { rotateX, rotateY, translateX, translateY, transformStyle: \"preserve-3d\", transition: \"transform 0.1s ease-out\" } : {}}>\n        {spotlight && isRevealed && <motion.div className=\"pointer-events-none absolute -inset-px rounded-[15px] opacity-0 transition duration-300 group-hover:opacity-100\" style={{ backgroundImage }} />}\n\n        <motion.div initial={{ width: \"100%\", height: \"100%\" }} animate={{ width: isImageShrunken ? \"6rem\" : \"100%\", height: isImageShrunken ? \"8rem\" : \"100%\", top: isImageShrunken ? \"4.5rem\" : 0, left: isImageShrunken ? \"1rem\" : 0, borderRadius: isImageShrunken ? \"0.5rem\" : \"0px\" }} transition={{ duration: 0.4, ease: \"easeInOut\" }} className=\"absolute overflow-hidden\">\n          <Image src={img} alt={name} layout=\"fill\" objectFit=\"cover\" />\n          <motion.div className=\"absolute top-2 right-2 w-[1.6875rem] h-[1.8125rem] flex items-center justify-center bg-white rounded shadow cursor-grab active:cursor-grabbing z-10\" drag={!isRevealed ? \"x\" : false} dragConstraints={{ left: 0, right: dragThreshold }} dragElastic={0.1} dragMomentum={false} onDragEnd={handleDragEnd} style={{ x: dragX }} animate={arrowControls} whileTap={!isRevealed ? { scale: 1.1 } : {}}>\n            <motion.div style={{ rotate: arrowRotation }}>\n              <ArrowBigLeft className=\"w-4 h-4 text-black pointer-events-none\" />\n            </motion.div>\n          </motion.div>\n        </motion.div>\n\n        <AnimatePresence>\n          {isRevealed && (\n            <motion.div key=\"content\" className=\"absolute inset-0\" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 0.3 }}>\n              <motion.div className=\"absolute top-2 right-2 w-6 h-6 flex items-center justify-center dark:bg-white bg-black rounded-full cursor-pointer z-20\" onClick={resetCard} whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.95 }}>\n                <X className=\"w-4 h-4 text-white dark:text-black\" strokeWidth={2} />\n              </motion.div>\n\n              <div className=\"p-4\">\n                <h1 className=\"text-xl font-bold tracking-wider\">{name}</h1>\n                <p className=\"text-sm tracking-wider\">{position}</p>\n              </div>\n\n              <div className=\"absolute top-[4.5rem] left-[8rem]\">\n                <h3 className=\"text-lg font-semibold mb-2\">Skills</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {skills.map((skill, index) => (\n                    <div key={index} className={`bg-gray-300 dark:bg-gray-800 rounded-md p-1 flex items-center justify-center w-8 h-8 ${spotlight ? 'group relative overflow-hidden' : ''}`} title={skill.name} onMouseMove={spotlight ? (e) => {\n                      const rect = e.currentTarget.getBoundingClientRect();\n                      const x = e.clientX - rect.left;\n                      const y = e.clientY - rect.top;\n                      e.currentTarget.style.setProperty('--spotlight-x', `${x}px`);\n                      e.currentTarget.style.setProperty('--spotlight-y', `${y}px`);\n                    } : undefined}>\n                      {spotlight && <div className=\"pointer-events-none absolute -inset-px rounded-md opacity-0 transition duration-300 group-hover:opacity-100\" style={{ background: `radial-gradient(100px circle at var(--spotlight-x, 50%) var(--spotlight-y, 50%), rgba(${spotlightColor}, 0.2), transparent)` }} />}\n                      <div className=\"relative z-10\">{renderSkillIcon(skill)}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"absolute top-[13rem] left-0 px-4\">\n                <p className=\"text-sm\">{bio}</p>\n              </div>\n\n              <div className=\"absolute bottom-4 left-4 flex gap-4\">\n                {socialLinks.map((social, index) => {\n                  const renderIcon = () => {\n                    if (typeof social.icon === 'string') {\n                      return <Image src={social.icon} alt={social.name} fill className=\"object-contain\" />;\n                    } else if (React.isValidElement(social.icon)) {\n                      return React.cloneElement(social.icon as React.ReactElement, { className: \"w-5 h-5\", width: 20, height: 20 });\n                    } else if (typeof social.icon === 'function') {\n                      const IconComponent = social.icon;\n                      return <IconComponent className=\"w-5 h-5\" />;\n                    }\n                    return null;\n                  };\n                  return (\n                    <Link key={index} href={social.url} target=\"_blank\" rel=\"noreferrer\">\n                      <div className={`w-5 h-5 relative flex items-center justify-center ${spotlight ? 'group overflow-hidden rounded' : ''}`} title={social.name} onMouseMove={spotlight ? (e) => {\n                        const rect = e.currentTarget.getBoundingClientRect();\n                        const x = e.clientX - rect.left;\n                        const y = e.clientY - rect.top;\n                        e.currentTarget.style.setProperty('--spotlight-x', `${x}px`);\n                        e.currentTarget.style.setProperty('--spotlight-y', `${y}px`);\n                      } : undefined}>\n                        {spotlight && <div className=\"pointer-events-none absolute -inset-px rounded opacity-0 transition duration-300 group-hover:opacity-100\" style={{ background: `radial-gradient(80px circle at var(--spotlight-x, 50%) var(--spotlight-y, 50%), rgba(${spotlightColor}, 0.2), transparent)` }} />}\n                        <div className=\"relative z-10\">{renderIcon()}</div>\n                      </div>\n                      <span className=\"sr-only\">{social.name}</span>\n                    </Link>\n                  );\n                })}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {!isRevealed && !isImageShrunken && (\n          <motion.div className=\"absolute top-[0.625rem] right-[2.1875rem] text-white text-xs opacity-80 bg-black bg-opacity-50 px-2 py-1 rounded\" initial={{ opacity: 0 }} animate={{ opacity: [0, 0.8, 0], transition: { repeat: Infinity, duration: 2, repeatDelay: 1 } }}>Drag →</motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n}"
    }
  ]
}
